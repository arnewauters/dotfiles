# Set variables
export TOPICS={{ .chezmoi.sourceDir }}/topics
export PROJECTS=~/Code

# ------------------------------------------------------------------------------
# CONFIG
# ------------------------------------------------------------------------------

export ZSH="$HOME/.oh-my-zsh"
export PATH=$HOME/bin:/usr/local/bin:$PATH
ZSH_THEME=""
HIST_STAMPS="dd.mm.yyyy"
plugins=(git zsh-syntax-highlighting fzf)
source $ZSH/oh-my-zsh.sh

# ------------------------------------------------------------------------------
# TOPICS
# ------------------------------------------------------------------------------

# grab all of our zsh files
typeset -U config_files
config_files=($TOPICS/**/*.zsh)

# first load the path files
for file in ${(M)config_files:#*/path.zsh}
do
  source $file
done

export PATH="{{ .chezmoi.sourceDir }}/bin:${PATH}"

# next load everything except path and completion files
for file in ${${config_files:#*/path.zsh}:#*/completion.zsh}
do
  source $file
done

autoload -U compinit
compinit
autoload -U zmv

# finally load every completion after autocomplete loads
for file in ${(M)config_files:#*/completion.zsh}
do
  source $file
done
unset config_files

# ------------------------------------------------------------------------------
# GENERAL
# ------------------------------------------------------------------------------

# Stash environment variables in ~/.localrc to stay out of main dotfiles
# repository
if [[ -a ~/.localrc ]]
then
  source ~/.localrc
fi

# History
export HISTFILE=~/.zsh_history
export HISTSIZE=200000
export SAVEHIST=200000

# do not dump to root
export ZSH_COMPDUMP=$ZSH/cache/.zcompdump-$HOST

# Preferred editor for local and remote sessions
if [[ -n $SSH_CONNECTION ]]; then
  export EDITOR='vim'
else
  export EDITOR='nvim'
fi

# use ripgrep as the default binary for FZF
export FZF_DEFAULT_COMMAND='rg --files --no-ignore-vcs --hidden'

# ------------------------------------------------------------------------------
# OS SPECIFIC
# ------------------------------------------------------------------------------

{{ if eq .chezmoi.os "darwin" }}
  # Disable press-and-hold for keys in favor of key repeat.
  defaults write com.microsoft.VSCode ApplePressAndHoldEnabled -bool false
  defaults write net.kovidgoyal.kitty ApplePressAndHoldEnabled -bool false

  # Always open everything in Finder's list view. This is important.
  defaults write com.apple.Finder FXPreferredViewStyle Nlsv

  # Show the ~/Library folder.
  chflags nohidden ~/Library

  # Set a fast key repeat.
  defaults write NSGlobalDomain KeyRepeat -int 2500

  # Set the Finder prefs for showing a few different volumes on the Desktop.
  defaults write com.apple.finder ShowExternalHardDrivesOnDesktop -bool true
  defaults write com.apple.finder ShowRemovableMediaOnDesktop -bool true
{{ else if eq .chezmoi.os "linux" }}
  # Faster keyboard repeat rate
  xset r rate 250 60
{{ else }}
  # other operating system
{{ end }}

# ------------------------------------------------------------------------------
# - LANGUAGES
# ------------------------------------------------------------------------------

# Java
export PATH="$HOME/.jenv/bin:$PATH"
eval "$(jenv init -)"

# switch to jdk like jdk 1.8 / jdk 9 etc
jdk() {
        version=$1
        export JAVA_HOME=$(/usr/libexec/java_home -v"$version");
        java -version
}

# auto switch using a .java-version file
function chpwd() {
  if [[ -f $PWD/.java-version ]]; then
    version=$(cat $PWD/.java-version)
    export JAVA_HOME=$(/usr/libexec/java_home -v $version)
  fi
}

# ------------------------------------------------------------------------------
# - Github Copilot Helpers
# ------------------------------------------------------------------------------

ghcs() {
  FUNCNAME="$funcstack[1]"
  TARGET="shell"
  local GH_DEBUG="$GH_DEBUG"
  local GH_HOST="$GH_HOST"

  local OPT OPTARG OPTIND
  while getopts "dht:-:" OPT; do
    if [ "$OPT" = "-" ]; then     # long option: reformulate OPT and OPTARG
      OPT="${OPTARG%%=*}"       # extract long option name
      OPTARG="${OPTARG#"$OPT"}" # extract long option argument (may be empty)
      OPTARG="${OPTARG#=}"      # if long option argument, remove assigning `=`
    fi

    case "$OPT" in
      debug | d)
        GH_DEBUG=api
        ;;

      help | h)
        echo "$__USAGE"
        return 0
        ;;

      hostname)
        GH_HOST="$OPTARG"
        ;;

      target | t)
        TARGET="$OPTARG"
        ;;
    esac
  done

  # shift so that $@, $1, etc. refer to the non-option arguments
  shift "$((OPTIND-1))"

  TMPFILE="$(mktemp -t gh-copilotXXXXXX)"
  trap 'rm -f "$TMPFILE"' EXIT
  if GH_DEBUG="$GH_DEBUG" GH_HOST="$GH_HOST" gh copilot suggest -t "$TARGET" "$@" --shell-out "$TMPFILE"; then
    if [ -s "$TMPFILE" ]; then
      FIXED_CMD="$(cat $TMPFILE)"
      print -s "$FIXED_CMD"
      echo
      eval "$FIXED_CMD"
    fi
  else
    return 1
  fi
}

ghce() {
  FUNCNAME="$funcstack[1]"
  local GH_DEBUG="$GH_DEBUG"
  local GH_HOST="$GH_HOST"

  local OPT OPTARG OPTIND
  while getopts "dh-:" OPT; do
    if [ "$OPT" = "-" ]; then     # long option: reformulate OPT and OPTARG
      OPT="${OPTARG%%=*}"       # extract long option name
      OPTARG="${OPTARG#"$OPT"}" # extract long option argument (may be empty)
      OPTARG="${OPTARG#=}"      # if long option argument, remove assigning `=`
    fi

    case "$OPT" in
      debug | d)
        GH_DEBUG=api
        ;;

      help | h)
        echo "$__USAGE"
        return 0
        ;;

      hostname)
        GH_HOST="$OPTARG"
        ;;
    esac
  done

  # shift so that $@, $1, etc. refer to the non-option arguments
  shift "$((OPTIND-1))"

  GH_DEBUG="$GH_DEBUG" GH_HOST="$GH_HOST" gh copilot explain "$@"
}

# pnpm
export PNPM_HOME="/Users/arnewauters/Library/pnpm"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end

